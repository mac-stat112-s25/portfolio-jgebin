---
title: "Data Import"
number-sections: true
execute: 
  warning: false
fig-height: 2.75
fig-width: 4.25
fig-env: 'figure'
fig-pos: 'h'
fig-align: center
code-fold: false
---


### Exercise 1
Downloaded imdb csv

### Exercise 2: Import Data into RStudio
## Part a
```{r}
library(tidyverse)

imdb_messy <- read_csv("~/GitHub/portfolio-jgebin/data/imdb_5000_messy.csv")

```
## Part b
```{r}
# This should be the folder where you stored this qmd!
getwd()
```
## Part c
```{r}
imdb_temp <- read_csv("../data/imdb_5000_messy.csv")
```
### Exercise 3: Check Data
## Part a
Open imdb_messy in the spreadsheet-like viewer by typing View(imdb_messy) in the console. Sort this “spreadsheet” by different variables by clicking on the arrows next to the variable names. Do you notice anything unexpected?

## Part b
```{r}
imdb_messy |>
  mutate(across(where(is.character), as.factor)) |>  # convert characters to factors in order to summarize
  summary()
```

### Exercise 4: Clean Data: Factor Variables 1

- What’s goofy about this / what do we need to fix?
There are 6 categories but there should only be 3. Since they are formatted differently there are two black and white categories and 3 color categories. 

- More specifically, what different categories does the color variable take, and how many movies fall into each of these categories?
The color variable takes 3 categories: color (30), Color (4,755), and COLOR(30) with a total of 4,815 movies between all three.

### Exercise 5: Clean Data: Factor Variables 2
## Part a
We could open the .csv file in, say, Excel or Google sheets, clean up the color variable, save a clean copy, and then reimport that into RStudio. BUT that would be the wrong thing to do. Why is it important to use R code, which we then save inside this qmd, to clean our data?

- This would be the wrong thing to do because it would mess up the import of data we performed earlier. By using R code, you can do this without all the extra steps. 
## Part b
Let’s use R code to change the color variable so that it appropriately combines the various categories into only 2: Color and Black_White. We’ve learned a couple sets of string-related tools that could be handy here. First, starting with the imdb_messy data, change the color variable using one of the functions we learned in the Factors lesson.

fct_relevel(), fct_recode(), fct_reorder()

Store your results in imdb_temp (don’t overwrite imdb_messy). To check your work, print out a count() table of the color variable in imdb_temp.
```{r}
library(dplyr)
library(forcats)
imdb_temp <- imdb_messy |>
  mutate(Colors = fct_recode(color,
                             "Color" = "color",      
                             "Color" = "COLOR",    
                             "Black and White" = "B&W")) 

count(imdb_temp, Colors)
```
## Part c
Repeat Part b using one of our string functions from the String lesson:

```{r}
imdb_temp <- imdb_messy %>%
  mutate(Colors = color %>%
           str_replace("color", "Color") %>%
           str_replace("COLOR", "Color") %>%
           str_replace("B&W", "Black and White"))

count(imdb_temp, Colors)
```

### Exercise 6: Clean Data: Missing Data 1
## Part a
```{r}
#Count the total number of rows in imdb_messy
count(imdb_messy)

# Then count the number of NAs in each column
colSums(is.na(imdb_messy))

# Then count the number of NAs in a specific column
imdb_messy |>
count(sum(is.na(actor_1_facebook_likes)))
```
## Part b
As a second step, let’s think about why some values are missing. Study the individual observations with NAs carefully. Why do you think they are missing? Are certain films more likely to have more NAs than others?

- Maybe they are movies that have not been released to the public yet since NAs are often in year of release and gross revenue.

## Part c
Consider a more specific example. Obtain a dataset of movies that are missing data on actor_1_facebook_likes. Then explain why you think there are NAs. HINT: is.na(___)

```{r}
missing_data_movies <- imdb_messy |>
  filter(is.na(actor_1_facebook_likes))|>
  select(movie_title, actor_1_facebook_likes)

head(missing_data_movies)
```
- This might be because the actors have not been announced yet.

### Exercise 7: Clean Data: Missing Data 2
## Part a
Calculate the average duration of a film. THINK: How can we deal with the NA’s?
```{r}
average_duration <- mean(imdb_messy$duration, na.rm = TRUE)

average_duration
```
## Part b
```{r}
imdb_temp <- drop_na(imdb_messy)

head(imdb_temp)
```
Follow-up questions:

What did drop_na() do? How many data points are left?

- This dropped any rows with NAs in them reducing the data set from 5043 to 3756 observations.
In what situations might this function be a good idea?

- This might be good if you are just trying to make a visualization broadly.
In what situations might this function be a bad idea?

- It might be a bad idea if you want to get rid of some NAs but not all of them as it deletes the whole observation.

## Part c
```{r}
ggplot(imdb_messy, aes(x = duration, fill = color)) +
  geom_density()
```
```{r}
imdb_temp <- imdb_messy |>
  mutate(complete_data = !is.na(duration) & !is.na(color))|>
  select(movie_title, complete_data, duration, color)

head(imdb_temp)
```

### Exercise 3: Check Data {.unnumbered}

#### Part b {.unnumbered}

There are many NA's, the `color` variable is goofy...

```{r}
imdb_messy |>
  mutate(across(where(is.character), as.factor)) |>  # convert characters to factors in order to summarize
  summary()
```



### Exercise 4: Clean Data: Factor Variables 1 {.unnumbered}

```{r}
imdb_messy |> 
  count(color)
```



### Exercise 5: Clean Data: Factor Variables 2 {.unnumbered}

#### Part a {.unnumbered}

That wouldn't be **reproducible**. It's important to log all steps in our data cleaning, so that we and others know and could reproduce those steps.

#### Part b {.unnumbered}

```{r}
imdb_temp <- imdb_messy |> 
  mutate(color = fct_recode(color,
                            "Color" = "COLOR",
                            "Color" = "color",
                            "Black_White" = "B&W",
                            "Black_White" = "Black and White"))

imdb_temp |> 
  count(color)
```

#### Part c {.unnumbered}

```{r}
imdb_temp <- imdb_messy |> 
  mutate(color = str_replace(color, "COLOR", "Color"),
         color = str_replace(color, "color", "Color"),
         color = str_replace(color, "B&W", "Black_White"),
         color = str_replace(color, "Black and White", "Black_White"))

imdb_temp |> 
  count(color)
```



### Exercise 6: Clean Data: Missing Data 1 {.unnumbered}

#### Part a {.unnumbered}

```{r}
# Count the total number of rows in imdb_messy
nrow(imdb_messy)

# Then count the number of NAs in each column
colSums(is.na(imdb_messy))
```

#### Part c {.unnumbered}

These are all documentaries that don't have any actors.

```{r}
imdb_messy |> 
  filter(is.na(actor_1_facebook_likes))
```



### Exercise 7: Clean: Missing Data 2 {.unnumbered}

#### Part a {.unnumbered}

```{r}
imdb_messy |> 
  summarize(mean(duration, na.rm = TRUE))
```

Follow-up:

We just remove the NAs from the calculation. No need to entirely remove the related movies from the dataset.

#### Part b {.unnumbered}

This gets rid of any movie with any NAs. There are only 3756 movies left! This approach is heavy-handed. It's typically only a good idea when we need complete info on every variable for every part of our analysis.

```{r}
imdb_temp <- drop_na(imdb_messy)
nrow(imdb_temp)
colSums(is.na(imdb_temp))
```

#### Part c {.unnumbered}

```{r}
ggplot(imdb_messy, aes(x = duration, fill = color)) +
  geom_density()
```

We keep most of the movies!

```{r}
# Approach 1
imdb_temp <- imdb_messy |> 
  select(duration, color) |> 
  drop_na()
dim(imdb_temp)

# Approach 2
imdb_temp <- imdb_messy |> 
  filter(!is.na(duration), !is.na(color))
dim(imdb_temp)

# Plot
ggplot(imdb_temp, aes(x = duration, fill = color)) +
  geom_density()
```

#### Part d {.unnumbered}

```{r}
imdb_temp <- imdb_messy |> 
  mutate(actor_1_facebook_likes =
         replace_na(actor_1_facebook_likes, 0))

imdb_temp |> 
  summarize(sum(is.na(actor_1_facebook_likes)))
```
